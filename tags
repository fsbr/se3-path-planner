!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
GridGraph	path_planner.py	/^class GridGraph:$/;"	c
Queue	path_planner.py	/^class Queue:$/;"	c
R1	se3class.py	/^    def R1(self, angle):$/;"	m	class:SpecialEuclidean
R2	se3class.py	/^    def R2(self, angle):$/;"	m	class:SpecialEuclidean
R3	se3class.py	/^    def R3(self, angle):$/;"	m	class:SpecialEuclidean
SpecialEuclidean	se3class.py	/^class SpecialEuclidean:$/;"	c
Xgse	cuspStudy/cuspAnalyze.py	/^    Xgse =  df['DefaultSC.gse.X']$/;"	v
Ygse	cuspStudy/cuspAnalyze.py	/^    Ygse =  df['DefaultSC.gse.Y']$/;"	v
Zgse	cuspStudy/cuspAnalyze.py	/^    Zgse =  df['DefaultSC.gse.Z']$/;"	v
__init__	path_planner.py	/^    def __init__(self):$/;"	m	class:Queue
__init__	path_planner.py	/^    def __init__(self,max_x=10,max_y=10):$/;"	m	class:GridGraph
__init__	se3class.py	/^    def __init__(self, tht=0, phi=0, psi=0, x=0, y=0, z=0):$/;"	m	class:SpecialEuclidean
a_star_search	path_planner.py	/^    def a_star_search(self, start, goal):$/;"	m	class:GridGraph
angle	cuspStudy/cuspAnalyze.py	/^    angle = np.arctan2(Xgse,Zgse)$/;"	v
anglesList	cuspStudy/cuspAnalyze.py	/^anglesList = [55, 60, 65, 70, 75, 80, 85]$/;"	v
ax	scratch/se3.py	/^ax = fig.add_subplot(111, projection='3d')$/;"	v
breadth_first_search	path_planner.py	/^    def breadth_first_search(self, start, goal):$/;"	m	class:GridGraph
cdict	cuspStudy/cuspAnalyze.py	/^    cdict = {'red': ((0.0, 0.0, 0.0),$/;"	v
cdict	cuspStudy/scratch/yadda.py	/^cdict = {'red': ((0.0, 0.0, 0.0),$/;"	v
circleTest	se3class.py	/^def circleTest():$/;"	f
cma	cuspStudy/cuspAnalyze.py	/^cma = []$/;"	v
cmaps	cuspStudy/scratch/yadda2.py	/^cmaps = [('Perceptually Uniform Sequential',$/;"	v
count	cuspStudy/cuspAnalyze.py	/^    count = 0$/;"	v
df	cuspStudy/cuspAnalyze.py	/^    df = pd.read_csv(files)$/;"	v
dijkstras_search	path_planner.py	/^    def dijkstras_search(self,start,goal):$/;"	m	class:GridGraph
empty	path_planner.py	/^    def empty(self):$/;"	m	class:Queue
fig	scratch/se3.py	/^fig = plt.figure()$/;"	v
filesList	cuspStudy/cuspAnalyze.py	/^filesList = ['55deg.txt', '60deg.txt','65deg.txt', '70deg.txt', '75deg.txt','80deg.txt','85deg.txt']$/;"	v
filesList	cuspStudy/cuspAnalyze.py	/^filesList = [pathName+files for files in filesList]$/;"	v
get	path_planner.py	/^    def get(self):$/;"	m	class:Queue
getGoalRegion	path_planner.py	/^    def getGoalRegion(self,model="tsyganenko"):$/;"	m	class:GridGraph
getObstacles	path_planner.py	/^    def getObstacles(self, model="circle"):$/;"	m	class:GridGraph
getTranslation	se3class.py	/^    def getTranslation(self):$/;"	m	class:SpecialEuclidean
getUnitVector	se3class.py	/^def getUnitVector(points, coords="sphere"):$/;"	f
getse3	se3class.py	/^    def getse3(self):$/;"	m	class:SpecialEuclidean
getso3	se3class.py	/^    def getso3(self, order=(3,1,3)):$/;"	m	class:SpecialEuclidean
gradient	cuspStudy/scratch/yadda2.py	/^gradient = np.linspace(0, 1, 256)$/;"	v
gradient	cuspStudy/scratch/yadda2.py	/^gradient = np.vstack((gradient, gradient))$/;"	v
highBound	cuspStudy/cuspAnalyze.py	/^    highBound = 0.2849$/;"	v
in_bounds	path_planner.py	/^    def in_bounds(self, id):$/;"	m	class:GridGraph
lateralBound	cuspStudy/cuspAnalyze.py	/^    lateralBound = 5.0$/;"	v
lowBound	cuspStudy/cuspAnalyze.py	/^    lowBound = 0.2151$/;"	v
makeCircle	se3class.py	/^def makeCircle(radius):$/;"	f
my_cmap	cuspStudy/cuspAnalyze.py	/^    my_cmap = matplotlib.colors.LinearSegmentedColormap('my_colormap',cdict,256)$/;"	v
my_cmap	cuspStudy/scratch/yadda.py	/^my_cmap = matplotlib.colors.LinearSegmentedColormap('my_colormap',cdict,256)$/;"	v
neighbors	path_planner.py	/^    def neighbors(self,node):$/;"	m	class:GridGraph
neighbors2	path_planner.py	/^    def neighbors2(self, id):$/;"	m	class:GridGraph
nrows	cuspStudy/scratch/yadda2.py	/^nrows = max(len(cmap_list) for cmap_category, cmap_list in cmaps)$/;"	v
oneMatrix	scratch/se3.py	/^oneMatrix = np.array([1]) # 1x1$/;"	v
passable	path_planner.py	/^    def passable(self, id):$/;"	m	class:GridGraph
pathName	cuspStudy/cuspAnalyze.py	/^pathName = '..\/..\/data-se3-path-planner\/data\/'$/;"	v
plot_color_gradients	cuspStudy/scratch/yadda2.py	/^def plot_color_gradients(cmap_category, cmap_list):$/;"	f
put	path_planner.py	/^    def put(self,x):$/;"	m	class:Queue
r	scratch/se3.py	/^r = np.array([[np.cos(tht), np.sin(tht), 0],[-np.sin(tht), np.cos(tht), 0], [0, 0, 1]]) # 3x3$/;"	v
reconstruct_path	path_planner.py	/^    def reconstruct_path(self, came_from, start, goal):$/;"	m	class:GridGraph
region	cuspStudy/cuspAnalyze.py	/^    region = []$/;"	v
se3	scratch/se3.py	/^se3 = np.vstack((se3top,se3bottom))$/;"	v
se3bottom	scratch/se3.py	/^se3bottom = np.hstack((zeroMatrix, oneMatrix))$/;"	v
se3top	scratch/se3.py	/^se3top = np.hstack((r,t))$/;"	v
se3x	scratch/se3.py	/^se3x = np.dot(se3,x)$/;"	v
se3y	scratch/se3.py	/^se3y = np.dot(se3,y)$/;"	v
simpleTest	path_planner.py	/^    def simpleTest(self):$/;"	m	class:GridGraph
simpleTest	se3class.py	/^def simpleTest():$/;"	f
t	scratch/se3.py	/^t = np.array([[2],[0],[0]])# 3x1$/;"	v
testTilt	path_planner.py	/^    def testTilt(self):$/;"	m	class:GridGraph
theta	cuspStudy/cuspAnalyze.py	/^    theta = np.arctan2(Ygse,Xgse)$/;"	v
tht	scratch/se3.py	/^tht = np.pi\/2$/;"	v
tilt	path_planner.py	/^    def tilt(self,t):$/;"	m	class:GridGraph
tilt	scratch/tilt.py	/^def tilt(t):$/;"	f
x	scratch/se3.py	/^x = np.array([[1],[0],[0],[1]])$/;"	v
y	scratch/se3.py	/^y = np.array([[0],[1],[0],[1]])$/;"	v
z	scratch/se3.py	/^z = np.array([[0],[0],[1], [1]])$/;"	v
zeroMatrix	scratch/se3.py	/^zeroMatrix = np.array([0,0,0]) #1x3$/;"	v
